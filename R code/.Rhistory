temp_rm <- smooth.spline(input$Depth,input[,ind],df=df)
input[,ind]
df=nrow(input)/2
temp_rm <- smooth.spline(input$Depth,input[,ind],df=df)
temp_agg <- aggregate(temp_rm$y,by=list(z_cuts),mean)
names(temp_agg) <- c('depths','values')
temp_agg$depths <- as.numeric(temp_agg$depths)
temp_int <- approx(temp_agg$depths,temp_agg$values,xout=breaks,ties=mean)
plot(temp_int)
points(input$Depth,input$Salinity..ppt.,col=2)
temp_agg <- aggregate(input[,ind],by=list(z_cuts),mean)
names(temp_agg) <- c('depths','values')
temp_agg$depths <- as.numeric(temp_agg$depths)
temp_int <- approx(temp_agg$depths,temp_agg$values,xout=breaks,ties=mean)
plot(temp_int)
points(input$Depth,input$Salinity..ppt.,col=2)
length(parms)
i=2
i=3
ind <- grep(parms[i],names(input),ignore.case = T)
ind <- ifelse(parms[i]=='temperature',ind[1],ind)
temp_rm <- smooth.spline(input$Depth,input[,ind],df=df)
temp_agg <- aggregate(temp_rm$y,by=list(z_cuts),mean)
# temp_agg <- aggregate(input[,ind],by=list(z_cuts),mean)
names(temp_agg) <- c('depths','values')
temp_agg$depths <- as.numeric(temp_agg$depths)
temp_int <- approx(temp_agg$depths,temp_agg$values,xout=breaks,ties=mean)
plot(temp_int)
points(input$Depth,input$Salinity..ppt.,col=2)
ind
names(input)[ind]
ind <- ifelse(parms[i]=='chlorophyll',ind[2],ind)
ind <- grep(parms[i],names(input),ignore.case = T)
ind <- ifelse(parms[i]=='temperature',ind[1],ind)
ind
ind <- grep(parms[i],names(input),ignore.case = T)
ind <- ifelse(parms[i]=='chlorophyll',ind[2],ind)
temp_rm <- smooth.spline(input$Depth,input[,ind],df=df)
temp_agg <- aggregate(temp_rm$y,by=list(z_cuts),mean)
# temp_agg <- aggregate(input[,ind],by=list(z_cuts),mean)
names(temp_agg) <- c('depths','values')
temp_agg$depths <- as.numeric(temp_agg$depths)
temp_int <- approx(temp_agg$depths,temp_agg$values,xout=breaks,ties=mean)
plot(temp_int)
points(input$Depth,input$Chlorophyll.a.Concentration..µg.L.,col=2)
plot(temp_int)
points(input$Depth,input$Chlorophyll.a.Concentration..µg.L.,col=2,typ='l')
plot(input$Depth,input$Chlorophyll.a.Concentration..µg.L.,col=2,typ='l')
points(temp_int)
points(temp_int,typ='b')
temp_agg <- aggregate(input[,ind],by=list(z_cuts),mean)
names(temp_agg) <- c('depths','values')
temp_agg$depths <- as.numeric(temp_agg$depths)
temp_int <- approx(temp_agg$depths,temp_agg$values,xout=breaks,ties=mean)
plot(input$Depth,input$Chlorophyll.a.Concentration..µg.L.,col=2,typ='l')
points(temp_int,typ='b')
i=4
ind <- grep(parms[i],names(input),ignore.case = T)
ind <- ifelse(parms[i]=='temperature',ind[1],ind)
ind <- ifelse(parms[i]=='chlorophyll',ind[2],ind)
temp_rm <- smooth.spline(input$Depth,input[,ind],df=df)
temp_agg <- aggregate(temp_rm$y,by=list(z_cuts),mean)
temp_agg <- aggregate(input[,ind],by=list(z_cuts),mean)
temp_rm <- smooth.spline(input$Depth,input[,ind],df=df)
temp_agg <- aggregate(temp_rm$y,by=list(z_cuts),mean)
# temp_agg <- aggregate(input[,ind],by=list(z_cuts),mean)
names(temp_agg) <- c('depths','values')
temp_agg$depths <- as.numeric(temp_agg$depths)
temp_int <- approx(temp_agg$depths,temp_agg$values,xout=breaks,ties=mean)
plot(input$Depth,input$RDO.Concentration..mg.L.,col=2,typ='l')
points(temp_int,typ='b')
parms[i]
ind <- grep(parms[i],names(input),ignore.case = T)
names(input)
parms = c('temperature','salinity','chlorophyll','rdo')
ind <- grep(parms[i],names(input),ignore.case = T)
ind <- ifelse(parms[i]=='rdo',ind[1],ind)
temp_rm <- smooth.spline(input$Depth,input[,ind],df=df)
temp_agg <- aggregate(temp_rm$y,by=list(z_cuts),mean)
# temp_agg <- aggregate(input[,ind],by=list(z_cuts),mean)
names(temp_agg) <- c('depths','values')
temp_agg$depths <- as.numeric(temp_agg$depths)
temp_int <- approx(temp_agg$depths,temp_agg$values,xout=breaks,ties=mean)
plot(input$Depth,input$RDO.Concentration..mg.L.,col=2,typ='l')
points(temp_int,typ='b')
temp_agg <- aggregate(input[,ind],by=list(z_cuts),mean)
names(temp_agg) <- c('depths','values')
temp_agg$depths <- as.numeric(temp_agg$depths)
temp_int <- approx(temp_agg$depths,temp_agg$values,xout=breaks,ties=mean)
points(temp_int,typ='b')
columns <- names(input)
### variables of interest
ind_aquatroll <- grep('at',columns)
ind_lat <- grep('Latitude',columns)
ind_lon <- grep('Longitude',columns)
ind_depth <- grep('Depth',columns)
ind_sal <- grep('Salinity',columns)
ind_temp <- grep('Temperature',columns) %>%
intersect(ind_aquatroll)
library(magrittr)
ind_temp <- grep('Temperature',columns) %>%
intersect(ind_aquatroll)
columns
grep('Temperature',columns)[1]
ind_temp <- grep('Temperature',columns)[1]
ind_chl <- grep('Chlorophyll-a Concentration',columns)
?read.csv
data2 <- read.csv('aquatroll_raw_data_extracted.csv',check.names = F)
names(data2)
data3 <- read_csv(aquatroll_raw_data_extracted.csv,col_types = cols())
library(readr)
data3 <- read_csv(aquatroll_raw_data_extracted.csv,col_types = cols())
setwd('~/Desktop/professional/projects/Postdoc_FL/data/FCWC/processed')
data3 <- read_csv(aquatroll_raw_data_extracted.csv,col_types = cols())
data3 <- read_csv('aquatroll_raw_data_extracted.csv',col_types = cols())
View(data3)
View(data2)
# data <- read.csv('aquatroll_raw_data_extracted.csv')
data <- read.csv('aquatroll_raw_data_extracted.csv',check.names = F)
input <- data[data$`profile index`==1,]
input$Depth <- NISTftTOmeter(input$Depth)
### convert feet to meters
if(unique(input$`depth unit`)=='(ft)'){
input$Depth <- NISTftTOmeter(input$Depth)
}
columns <- names(input)
### variables of interest
ind_lat <- grep('Latitude',columns)
ind_lon <- grep('Longitude',columns)
ind_depth <- grep('Depth',columns)
ind_sal <- grep('Salinity',columns)
ind_temp <- grep('Temperature',columns)[1]
ind_chl <- grep('Chlorophyll-a Concentration',columns)
ind_chlf <- grep('Chlorophyll-a Fluorescence',columns)
ind_oxy <- grep('RDO Concentration',columns)
ind_cond <- grep('Actual Conductivity',columns)
ind_cond2 <- grep('Specific Conductivity',columns)
ind_all <- c(1,ind_lat,ind_lon,ind_depth,ind_sal,ind_temp,ind_chl,ind_chlf,ind_oxy,ind_cond,ind_cond2)
### keep only variables of interest
input <- data.frame(input[,ind_all])
View(input)
input <- data[data$`profile index`==1,]
View(input)
### convert feet to meters
if(unique(input$`depth unit`)=='(ft)'){
input$Depth <- NISTftTOmeter(input$Depth)
}
columns <- names(input)
### variables of interest
ind_lat <- grep('Latitude',columns)
ind_lon <- grep('Longitude',columns)
ind_depth <- grep('Depth',columns)
ind_sal <- grep('Salinity',columns)
ind_temp <- grep('Temperature',columns)[1]
ind_chl <- grep('Chlorophyll-a Concentration',columns)
ind_chlf <- grep('Chlorophyll-a Fluorescence',columns)
ind_oxy <- grep('RDO Concentration',columns)
ind_cond <- grep('Actual Conductivity',columns)
ind_cond2 <- grep('Specific Conductivity',columns)
ind_all <- c(1,ind_lat,ind_lon,ind_depth,ind_sal,ind_temp,ind_chl,ind_chlf,ind_oxy,ind_cond,ind_cond2)
### keep only variables of interest
input <- as.data.frame(input[,ind_all])
View(input)
columns <- names(input)
# average lon & lat, before filtering
lon_avg <- mean(input[grep('Longitude',columns)], na.rm = T)
input[grep('Longitude',columns)]
input[grep('Latitude',columns)]
mean(input[,grep('Longitude',columns)], na.rm = T)
mean(input[,grep('Latitude',columns)], na.rm = T)
input[,grep('Latitude',columns)]
ymd_hms(input[,grep('Date')])
ymd_hms(input[,grep('Date',input)])
input <- data[data$`profile index`==1,]
### convert feet to meters
if(unique(input$`depth unit`)=='(ft)'){
input$Depth <- NISTftTOmeter(input$Depth)
}
columns <- names(input)
### variables of interest
ind_date <- grep('Date',columns)
ind_lat <- grep('Latitude',columns)
ind_lon <- grep('Longitude',columns)
ind_depth <- grep('Depth',columns)
ind_sal <- grep('Salinity',columns)
ind_temp <- grep('Temperature',columns)[1]
ind_chl <- grep('Chlorophyll-a Concentration',columns)
ind_chlf <- grep('Chlorophyll-a Fluorescence',columns)
ind_oxy <- grep('RDO Concentration',columns)
ind_cond <- grep('Actual Conductivity',columns)
ind_cond2 <- grep('Specific Conductivity',columns)
ind_all <- c(1,ind_date,ind_lat,ind_lon,ind_depth,ind_sal,ind_temp,ind_chl,ind_chlf,ind_oxy,ind_cond,ind_cond2)
### keep only variables of interest
input <- as.data.frame(input[,ind_all])
columns <- names(input)
# average lon & lat, before filtering
lon_avg <- mean(input[,grep('Longitude',columns)], na.rm = T)
lat_avg <- mean(input[,grep('Latitude',columns)], na.rm = T)
source("~/.active-rstudio-document", echo=TRUE)
ymd_hms(input[,grep('Date',input)])
setwd('~/Desktop/professional/projects/Postdoc_FL/data/FCWC/processed')
list.files()
# data <- read.csv('aquatroll_raw_data_extracted.csv')
data <- read.csv('aquatroll_raw_data_extracted.csv',check.names = F)
input <- data[data$`profile index`==1,]
### convert feet to meters
if(unique(input$`depth unit`)=='(ft)'){
input$Depth <- NISTftTOmeter(input$Depth)
}
columns <- names(input)
### variables of interest
ind_date <- grep('Date',columns)
ind_lat <- grep('Latitude',columns)
ind_lon <- grep('Longitude',columns)
ind_depth <- grep('Depth',columns)
ind_sal <- grep('Salinity',columns)
ind_temp <- grep('Temperature',columns)[1]
ind_chl <- grep('Chlorophyll-a Concentration',columns)
ind_chlf <- grep('Chlorophyll-a Fluorescence',columns)
ind_oxy <- grep('RDO Concentration',columns)
ind_cond <- grep('Actual Conductivity',columns)
ind_cond2 <- grep('Specific Conductivity',columns)
ind_all <- c(1,ind_date,ind_lat,ind_lon,ind_depth,ind_sal,ind_temp,ind_chl,ind_chlf,ind_oxy,ind_cond,ind_cond2)
### keep only variables of interest
input <- as.data.frame(input[,ind_all])
columns <- names(input)
# average lon & lat, before filtering
lon_avg <- mean(input[,grep('Longitude',columns)], na.rm = T)
lat_avg <- mean(input[,grep('Latitude',columns)], na.rm = T)
# order by time
input$Date.Time <- ymd_hms(input[,grep('Date',input)])
ymd_hms(input[,grep('Date',input)])
grep('Date',input)
View(input)
ymd_hms(input[,grep('Date',columns)])
# order by time
input$Date.Time <- ymd_hms(input[,grep('Date',columns)])
input <- input[order(input$Date.Time),]
View(input)
# filter for downcast (not up)
row_end <- which.max(input$Depth)
input <- input[1:row_end,]
# filter out surface entries (< 2 m), except row immediately before
ind_lt2m <- which(input$Depth < z_min)
if (length(ind_lt2m) > 0){
row_beg <- max(ind_lt2m) - 1
input <- input[row_beg:nrow(input),]
}
if(nrow(input)<3){
stop('\n\n not enough data \n\n')
}
### interpolate data to smooth
breaks <- seq(0,ceiling(max(input$Depth)),resolution)
z_cuts <- cut(input$Depth,breaks=breaks+.5)
levels(z_cuts) <- breaks[2:length(breaks)]
i=1
ind <- grep(parms[i],names(input),ignore.case = T)
ind <- ifelse(parms[i]=='temperature',ind[1],ind)
ind <- ifelse(parms[i]=='chlorophyll',ind[2],ind)
ind <- grep(parms[i],names(input),ignore.case = T)
ind <- ifelse(parms[i]=='temperature',ind[1],ind)
ind <- ifelse(parms[i]=='chlorophyll',ind[2],ind)
ind <- ifelse(parms[i]=='rdo',ind[1],ind)
temp_rm <- smooth.spline(input$Depth,input[,ind],df=df)
temp_agg <- aggregate(temp_rm$y,by=list(z_cuts),mean)
# temp_agg <- aggregate(input[,ind],by=list(z_cuts),mean)
names(temp_agg) <- c('depths','values')
temp_agg$depths <- as.numeric(temp_agg$depths)
temp_int <- approx(temp_agg$depths,temp_agg$values,xout=breaks,ties=mean)
plot(input$Depth,input$`Temperature (°C) AT`,col=2,typ='l')
points(temp_int,typ='b')
parms
?vapply
apply(parms,1,function(x) grep(x,names(columns)))
names(columns)
apply(parms,1,function(x) grep(x,names(input)))
apply(parms,2,function(x) grep(x,names(input)))
lapply(parms,function(x) grep(x,names(input)))
parms
lapply(parms,function(x) grep(x,names(input),ignore.case = T))
parms <- c('slag')
lapply(parms,function(x) grep(x,names(input),ignore.case = T))
parms = c('slag','temperature','salinity','chlorophyll','rdo')
lapply(parms,function(x) grep(x,names(input),ignore.case = T))
vapply(parms,function(x) grep(x,names(input),ignore.case = T))
sapply(parms,function(x) grep(x,names(input),ignore.case = T))
sapply(test,length)
test <- sapply(parms,function(x) grep(x,names(input),ignore.case = T))
sapply(test,length)
lths <- sapply(test,length)
test <- sapply(parms,function(x) grep(x,names(input),ignore.case = T)) %>%
sapply(length)
any(test)<1
test
any(length(test))<1
any(test<1)
which(test<1)
names(test)[which(test<1)]
# print(paste(input,input,sep='/'))
warning(paste('\n\n invalid parameter \n\n',
names(test)[which(test<1)],
'\n\n'),
immediate. = T)
input <- data[data$`profile index`==1,]
### test for valid parameters
test <- sapply(parms,function(x) grep(x,names(input),ignore.case = T)) %>%
sapply(length)
if(any(test<1)){
names(test)[which(test<1)]
# print(paste(input,input,sep='/'))
warning(paste('\n\n Invalid parameter: \n\n',
names(test)[which(test<1)],
'\n\n'),
immediate. = T)
}
arms = c('temperature','salinity','chlorophyll','rdo')
parms = c('temperature','salinity','chlorophyll','rdo')
### test for valid parameters
test <- sapply(parms,function(x) grep(x,names(input),ignore.case = T)) %>%
sapply(length)
if(any(test<1)){
names(test)[which(test<1)]
# print(paste(input,input,sep='/'))
warning(paste('\n\n Invalid parameter: \n\n',
names(test)[which(test<1)],
'\n\n'),
immediate. = T)
}
### convert feet to meters
if(unique(input$`depth unit`)=='(ft)'){
input$Depth <- NISTftTOmeter(input$Depth)
}
columns <- names(input)
### variables of interest
ind_date <- grep('Date',columns)
ind_lat <- grep('Latitude',columns)
ind_lon <- grep('Longitude',columns)
ind_depth <- grep('Depth',columns)
ind_all <- c(1,ind_date,ind_lat,ind_lon,ind_depth)
names(input)
ind_cond <- grep('Actual Conductivity',columns)
ind_cond2 <- grep('Specific Conductivity',columns)
ind <- union(ind,ind_cond,ind_cond2)
ind <- union(ind,ind_cond) %>%
union(ind_cond2)
i=1
ind <- grep(parms[i],names(input),ignore.case = T)
if(parms[i]=='temperature'){
ind <- ind[1]
}
if(parms[i]=='salinity'){
ind_cond <- grep('Actual Conductivity',columns)
ind_cond2 <- grep('Specific Conductivity',columns)
ind <- union(ind,ind_cond) %>%
union(ind_cond2)
}
i=2
ind <- grep(parms[i],names(input),ignore.case = T)
if(parms[i]=='temperature'){
ind <- ind[1]
}
if(parms[i]=='salinity'){
ind_cond <- grep('Actual Conductivity',columns)
ind_cond2 <- grep('Specific Conductivity',columns)
ind <- union(ind,ind_cond) %>%
union(ind_cond2)
}
i=3
ind <- grep(parms[i],names(input),ignore.case = T)
if(parms[i]=='temperature'){
ind <- ind[1]
}
if(parms[i]=='salinity'){
ind_cond <- grep('Actual Conductivity',columns)
ind_cond2 <- grep('Specific Conductivity',columns)
ind <- union(ind,ind_cond) %>%
union(ind_cond2)
}
i=4
ind <- grep(parms[i],names(input),ignore.case = T)
if(parms[i]=='temperature'){
ind <- ind[1]
}
if(parms[i]=='salinity'){
ind_cond <- grep('Actual Conductivity',columns)
ind_cond2 <- grep('Specific Conductivity',columns)
ind <- union(ind,ind_cond) %>%
union(ind_cond2)
}
### variables of interest
ind_date <- grep('Date',columns)
ind_lat <- grep('Latitude',columns)
ind_lon <- grep('Longitude',columns)
ind_depth <- grep('Depth',columns)
ind_all <- c(1,ind_date,ind_lat,ind_lon,ind_depth)
for(i in 1:length(parms)){
ind <- grep(parms[i],names(input),ignore.case = T)
if(parms[i]=='temperature'){
ind <- ind[1]
}
if(parms[i]=='salinity'){
ind_cond <- grep('Actual Conductivity',columns)
ind_cond2 <- grep('Specific Conductivity',columns)
ind <- union(ind,ind_cond) %>%
union(ind_cond2)
}
ind_all <- c(ind_all,ind)
}
ind_all <- c(1,ind_date,ind_lat,ind_lon,ind_depth,ind_sal,ind_temp,ind_chl,ind_chlf,ind_oxy,ind_cond,ind_cond2)
### keep only variables of interest
input <- as.data.frame(input[,ind_all])
columns <- names(input)
View(input)
View(input)
i=3
ind <- grep(parms[i],names(input),ignore.case = T)
input[,ind[1]]
is.na(input[,ind[1]])
sum(is.na(input[,ind[1]]))
sum(is.na(input[,ind[1]]))==nrow(input)
###
match(parms,'rdo')
###
sum(match(parms,'rdo'))
###
any(match(parms,'rdo')>0)
###
any(match(parms,'f')>0)
###
which(parms=='rdo')
###
which(parms=='do')
###
length(which(parms=='do'))
length(which(parms=='oxygen'))>0
parms = c('temperature','salinity','chlorophyll','oxygen')
length(which(parms=='oxygen'))>0
which(parms=='oxygen')
parms[which(parms=='oxygen')]
parms[which(parms=='oxygen')] <- 'rdo'
parms
sum(is.na(input[,ind[1]]))
i=3
ind <- grep(parms[i],names(input),ignore.case = T)
ind <- ind[1]
input[,ind[2]]
ind <- grep(parms[i],names(input),ignore.case = T)
input[,ind[2]]
input[,ind[1]]
input[,ind[2]]*10
sum(is.na(input[,grep('chlorophyll',columns)]))==nrow(input)
input[,grep('chlorophyll',columns)]
columns
input[,grep('chlorophyll',columns,ignore.case = T)]
sum(is.na(input[,grep('chlorophyll',columns,ignore.case = T)[1]]))
sum(is.na(input[,grep('chlorophyll',columns,ignore.case = T)[1]]))==nrow(input)
library(gsw)
lat <- ifelse(is.na(mean(input[,grep('latitude',columns,ignore.case = T)],na.rm=T)),27,mean(input[,grep('latitude',columns,ignore.case = T)],na.rm=T))
lon <- ifelse(is.na(mean(input[,grep('longitude',columns,ignore.case = T)],na.rm=T)),-82,mean(input[,grep('longitude',columns,ignore.case = T)],na.rm=T))
pressure_dbar <- gsw_p_from_z(input$Depth,lat)
SP <- gsw_SP_from_C(input[,grep('specific',columns,ignore.case = T)]/1000,
input[,grep('temperature',columns,ignore.case = T)[1]],
pressure_dbar)
input$`Salinity (ppt)`
SP
View(input)
input[,grep('temperature',columns,ignore.case = T)
input[,grep('temperature',columns,ignore.case = T)[1]]
pressure_dbar
input$Depth
pressure_dbar <- gsw_p_from_z(input$Depth,lat)
SP <- gsw_SP_from_C(input[,grep('specific',columns,ignore.case = T)]/1000,
input[,grep('temperature',columns,ignore.case = T)[1]],
pressure_dbar)
pressure_dbar <- gsw_p_from_z(input$Depth,lat)
SP <- gsw_SP_from_C(input[,grep('specific',columns,ignore.case = T)]/1000,
input[,grep('temperature',columns,ignore.case = T)[1]],
pressure_dbar)
gsw_SA_from_SP(SP, pressure_dbar, lon, lat)
pressure_dbar
input$Depth
lat
?gsw_p_from_z
pressure_dbar <- gsw_p_from_z(-input$Depth,lat)
SP <- gsw_SP_from_C(input[,grep('specific',columns,ignore.case = T)]/1000,
input[,grep('temperature',columns,ignore.case = T)[1]],
pressure_dbar)
SP
gsw_SA_from_SP(SP, pressure_dbar, lon, lat)
input$`Salinity (ppt)`
SP <- gsw_SP_from_C(input[,grep('actual',columns,ignore.case = T)]/1000,
input[,grep('temperature',columns,ignore.case = T)[1]],
pressure_dbar)
gsw_SA_from_SP(SP, pressure_dbar, lon, lat)
gsw_SA_from_SP(SP, pressure_dbar, lon, lat)
SA <- gsw_SA_from_SP(SP, pressure_dbar, lon, lat)
plot(input$`Salinity (ppt)`,SA)
SP <- gsw_SP_from_C(input[,grep('specific',columns,ignore.case = T)]/1000,
input[,grep('temperature',columns,ignore.case = T)[1]],
pressure_dbar)
SA <- gsw_SA_from_SP(SP, pressure_dbar, lon, lat)
plot(input$`Salinity (ppt)`,SA)
abline(0,1)
SP <- gsw_SP_from_C(input[,grep('actual',columns,ignore.case = T)]/1000,
input[,grep('temperature',columns,ignore.case = T)[1]],
pressure_dbar)
SA <- gsw_SA_from_SP(SP, pressure_dbar, lon, lat)
plot(input$`Salinity (ppt)`,SA)
abline(0,1)
input[,grep('salinity',columns,ignore.case = T)[1]] <- gsw_SA_from_SP(SP, pressure_dbar, lon, lat)
input[,grep('salinity',columns,ignore.case = T)[1]]
grep('salinity',columns,ignore.case = T)
